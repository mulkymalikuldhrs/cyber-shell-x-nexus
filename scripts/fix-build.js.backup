// Fix build script untuk CyberShellX
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('🔧 Memperbaiki konfigurasi build CyberShellX...');

// Baca package.json
const packageJsonPath = path.join(process.cwd(), 'package.json');
let packageJson;

try {
  packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
} catch (error) {
  console.error('❌ Tidak dapat membaca package.json:', error.message);
  process.exit(1);
}

// Tambahkan script build:dev jika belum ada
if (!packageJson.scripts['build:dev']) {
  packageJson.scripts['build:dev'] = 'echo "Build not needed for offline mode"';
  console.log('✅ Menambahkan script build:dev (offline mode)');
}

// Script untuk offline mode
const offlineScripts = {
  'dev': 'node server/index.js',
  'offline': 'node cli-interface.js',
  'cli': 'node cli-interface.js',
  'start': 'node server/index.js',
  'build': 'echo "Build not needed for offline mode"',
  'build:dev': 'echo "Build not needed for offline mode"'
};

Object.entries(offlineScripts).forEach(([key, value]) => {
  packageJson.scripts[key] = value;
  console.log(`✅ Updated script ${key} for offline mode`);
});

// Tulis kembali package.json
try {
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
  console.log('✅ package.json berhasil diperbarui untuk offline mode');
} catch (error) {
  console.error('❌ Gagal menulis package.json:', error.message);
  process.exit(1);
}

console.log('🚀 Konfigurasi offline mode selesai diperbaiki!');
